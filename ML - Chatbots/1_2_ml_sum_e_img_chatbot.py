# -*- coding: utf-8 -*-
"""1.2 ML- Sum e IMG chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SBncwZHXLZSOXbzHWMqK8yblW-71ZDnA
"""

!pip install streamlit
!pip install transformers
!pip install diffusers

import streamlit as st
from transformers import pipeline
from diffusers import StableDiffusionPipeline

# Configuração do pipeline para sumarização
summarizer = pipeline("summarization", model="facebook/bart-large-cnn")

# Configuração do pipeline para geração de imagens
def load_image_generator():
    return StableDiffusionPipeline.from_pretrained(
        "runwayml/stable-diffusion-v1-5"
    ).to("cpu")

image_generator = load_image_generator()

# Função para sumarizar texto
def summarize_text(input_text):
    if not input_text.strip():
        return "Por favor, insira um texto para sumarizar."
    result = summarizer(input_text, max_length=130, min_length=30, do_sample=False)
    return result[0]["summary_text"]

# Função para gerar imagem
def generate_image(prompt):
    if not prompt.strip():
        return "Por favor, insira uma descrição para gerar a imagem."
    image = image_generator(prompt).images[0]
    return image

# Configuração da interface Streamlit
def run_chatbot():
    st.title("ChatBot Multimodal")
    st.markdown("### Sumarização de Textos e Geração de Imagens")

    # Histórico de mensagens
    if "messages" not in st.session_state:
        st.session_state["messages"] = [
            ("Bot", "Olá! Posso ajudar com sumarização de textos ou geração de imagens. O que você gostaria de fazer?")
        ]

    # Exibir histórico de mensagens
    for sender, message in st.session_state["messages"]:
        if sender == "Você":
            st.markdown(f"<div style='text-align: right; color: black;'>{message}</div>", unsafe_allow_html=True)
        elif isinstance(message, str):
            st.markdown(f"<div style='text-align: left; color: blue;'>{message}</div>", unsafe_allow_html=True)
        else:
            st.image(message, caption="Imagem Gerada pelo Bot", use_column_width=True)

    # Input do usuário
    user_input = st.text_input("Digite sua mensagem ou prompt:", "")
    task = st.radio("Escolha a tarefa:", ["Sumarizar Texto", "Gerar Imagem"])

    if st.button("Enviar"):
        # Adicionar mensagem do usuário ao histórico
        st.session_state["messages"].append(("Você", user_input))

        # Realizar a tarefa escolhida
        if task == "Sumarizar Texto":
            response = summarize_text(user_input)
        elif task == "Gerar Imagem":
            response = generate_image(user_input)

        # Adicionar resposta do bot ao histórico
        st.session_state["messages"].append(("Bot", response))

        # Atualizar a interface
        st.experimental_rerun()

# Iniciar a aplicação Streamlit
import os
with open("chatbot_multimodal.py", "w") as f:
    f.write("""
import streamlit as st
from transformers import pipeline
from diffusers import StableDiffusionPipeline

summarizer = pipeline("summarization", model="facebook/bart-large-cnn")

def load_image_generator():
    return StableDiffusionPipeline.from_pretrained(
        "runwayml/stable-diffusion-v1-5"
    ).to("cpu")

image_generator = load_image_generator()

def summarize_text(input_text):
    if not input_text.strip():
        return "Por favor, insira um texto para sumarizar."
    result = summarizer(input_text, max_length=130, min_length=30, do_sample=False)
    return result[0]["summary_text"]

def generate_image(prompt):
    if not prompt.strip():
        return "Por favor, insira uma descrição para gerar a imagem."
    image = image_generator(prompt).images[0]
    return image

def run_chatbot():
    st.title("ChatBot Multimodal")
    st.markdown("### Sumarização de Textos e Geração de Imagens")

    if "messages" not in st.session_state:
        st.session_state["messages"] = [
            ("Bot", "Olá! Posso ajudar com sumarização de textos ou geração de imagens. O que você gostaria de fazer?")
        ]

    for sender, message in st.session_state["messages"]:
        if sender == "Você":
            st.markdown(f"<div style='text-align: right; color: black;'>{message}</div>", unsafe_allow_html=True)
        elif isinstance(message, str):
            st.markdown(f"<div style='text-align: left; color: blue;'>{message}</div>", unsafe_allow_html=True)
        else:
            st.image(message, caption="Imagem Gerada pelo Bot", use_column_width=True)

    user_input = st.text_input("Digite sua mensagem ou prompt:", "")
    task = st.radio("Escolha a tarefa:", ["Sumarizar Texto", "Gerar Imagem"])

    if st.button("Enviar"):
        st.session_state["messages"].append(("Você", user_input))

        if task == "Sumarizar Texto":
            response = summarize_text(user_input)
        elif task == "Gerar Imagem":
            response = generate_image(user_input)

        st.session_state["messages"].append(("Bot", response))
        st.experimental_rerun()

run_chatbot()
""")

# Execute o Streamlit
!streamlit run chatbot_multimodal.py & npx localtunnel --port 8501

!streamlit run chatbot_multimodal.py

